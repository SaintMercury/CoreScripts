local Types            = require('custom.saint.record.parser.primitive.Types')
local Size             = require('custom.saint.record.parser.primitive.Size')
local BaseRecordParser = require('custom.saint.record.parser.BaseRecordParser')
local BaseFieldsParser = require('custom.saint.record.parser.BaseFieldsParser')
local ParseField       = require('custom.saint.record.parser.primitive.ParseField')
local HasFlag          = require('custom.saint.record.parser.primitive.Common')

local function FlagsToObj(flagNum)
    return {
        autoGenerated = HasFlag(flagNum, 0x01),
    }
end

---@param binaryReader BinaryStringReader
local function ParseNAME(binaryReader, context)
    local res = binaryReader:Read(binaryReader.length)
    context['NAME'] = res
    return res
end

---@param binaryReader BinaryStringReader
local function ParseMODL(binaryReader)
    return binaryReader:Read(binaryReader.length)
end

---@param binaryReader BinaryStringReader
local function ParseCNAM(binaryReader)
    return binaryReader:Read(binaryReader.length)
end

---@param binaryReader BinaryStringReader
local function ParseFNAM(binaryReader)
    return binaryReader:Read(binaryReader.length)
end

---@param binaryReader BinaryStringReader
local function ParseRNAM(binaryReader)
    return binaryReader:Read(binaryReader.length)
end

---@param binaryReader BinaryStringReader
local function ParseANAM(binaryReader)
    return binaryReader:Read(binaryReader.length)
end

---@param binaryReader BinaryStringReader
local function ParseBNAM(binaryReader)
    return binaryReader:Read(binaryReader.length)
end

---@param binaryReader BinaryStringReader
local function ParseKNAM(binaryReader)
    return binaryReader:Read(binaryReader.length)
end

---@param binaryReader BinaryStringReader
local function ParseSCRI(binaryReader)
    return binaryReader:Read(binaryReader.length)
end

---@param binaryReader BinaryStringReader
local function ParseNPDT(binaryReader)
    if binaryReader.length == 52 then
        return {
            level = binaryReader:Read(Size.HALFWORD, Types.UINT16),
            attributes = {
                binaryReader:Read(Size.BYTE, Types.UINT8),
                binaryReader:Read(Size.BYTE, Types.UINT8),
                binaryReader:Read(Size.BYTE, Types.UINT8),
                binaryReader:Read(Size.BYTE, Types.UINT8),
                binaryReader:Read(Size.BYTE, Types.UINT8),
                binaryReader:Read(Size.BYTE, Types.UINT8),
                binaryReader:Read(Size.BYTE, Types.UINT8),
                binaryReader:Read(Size.BYTE, Types.UINT8),
            },
            skills = {
                binaryReader:Read(Size.BYTE, Types.UINT8),
                binaryReader:Read(Size.BYTE, Types.UINT8),
                binaryReader:Read(Size.BYTE, Types.UINT8),
                binaryReader:Read(Size.BYTE, Types.UINT8),
                binaryReader:Read(Size.BYTE, Types.UINT8),
                binaryReader:Read(Size.BYTE, Types.UINT8),
                binaryReader:Read(Size.BYTE, Types.UINT8),
                binaryReader:Read(Size.BYTE, Types.UINT8),
                binaryReader:Read(Size.BYTE, Types.UINT8),

                binaryReader:Read(Size.BYTE, Types.UINT8),
                binaryReader:Read(Size.BYTE, Types.UINT8),
                binaryReader:Read(Size.BYTE, Types.UINT8),
                binaryReader:Read(Size.BYTE, Types.UINT8),
                binaryReader:Read(Size.BYTE, Types.UINT8),
                binaryReader:Read(Size.BYTE, Types.UINT8),
                binaryReader:Read(Size.BYTE, Types.UINT8),
                binaryReader:Read(Size.BYTE, Types.UINT8),
                binaryReader:Read(Size.BYTE, Types.UINT8),

                binaryReader:Read(Size.BYTE, Types.UINT8),
                binaryReader:Read(Size.BYTE, Types.UINT8),
                binaryReader:Read(Size.BYTE, Types.UINT8),
                binaryReader:Read(Size.BYTE, Types.UINT8),
                binaryReader:Read(Size.BYTE, Types.UINT8),
                binaryReader:Read(Size.BYTE, Types.UINT8),
                binaryReader:Read(Size.BYTE, Types.UINT8),
                binaryReader:Read(Size.BYTE, Types.UINT8),
                binaryReader:Read(Size.BYTE, Types.UINT8),
            },
            unknown = binaryReader:Read(Size.BYTE, Types.UINT8),
            health = binaryReader:Read(Size.HALFWORD, Types.UINT16),
            spellPts = binaryReader:Read(Size.HALFWORD, Types.UINT16),
            fatigue = binaryReader:Read(Size.HALFWORD, Types.UINT16),
            disposition = binaryReader:Read(Size.BYTE, Types.UINT8),
            reputation = binaryReader:Read(Size.BYTE, Types.UINT8),
            rank = binaryReader:Read(Size.BYTE, Types.UINT8),
            unknown2 = binaryReader:Read(Size.BYTE, Types.UINT8),
            gold = binaryReader:Read(Size.INTEGER, Types.UINT32),
        }
    elseif binaryReader.length == 12 then
        return {
            level = binaryReader:Read(Size.HALFWORD, Types.UINT16),
            disposition = binaryReader:Read(Size.BYTE, Types.UINT8),
            reputation = binaryReader:Read(Size.BYTE, Types.UINT8),
            rank = binaryReader:Read(Size.BYTE, Types.UINT8),
            unknown = {
                binaryReader:Read(Size.BYTE, Types.UINT8),
                binaryReader:Read(Size.BYTE, Types.UINT8),
                binaryReader:Read(Size.BYTE, Types.UINT8),
            },
            gold = binaryReader:Read(Size.INTEGER, Types.UINT32),
        }
    else
        error('Unknown size of npc_ data struct')
    end
end

---@param binaryReader BinaryStringReader
local function ParseFLAG(binaryReader)
    return binaryReader:Read(Size.INTEGER, Types.UINT32)
end

---@param binaryReader BinaryStringReader
local function ParseXSCL(binaryReader)
    return binaryReader:Read(Size.INTEGER, Types.FLOAT)
end

---@param binaryReader BinaryStringReader
local function ParseNPCO(binaryReader)
    return {
        objectCount = binaryReader:Read(Size.INTEGER, Types.INT32),
        objectName = binaryReader:Read(32),
    }
end

---@param binaryReader BinaryStringReader
local function ParseNPCS(binaryReader)
    return binaryReader:Read(32)
end

---@param binaryReader  BinaryStringReader
local function ParseAIDT(binaryReader)
    local result = {
        hello = binaryReader:Read(Size.BYTE, Types.UINT8),
        unknown1 = binaryReader:Read(Size.BYTE, Types.UINT8),
        fight = binaryReader:Read(Size.BYTE, Types.UINT8),
        flee = binaryReader:Read(Size.BYTE, Types.UINT8),
        alarm = binaryReader:Read(Size.BYTE, Types.UINT8),
        unknown2 = binaryReader:Read(Size.BYTE, Types.UINT8),
        unknown3 = binaryReader:Read(Size.BYTE, Types.UINT8),
        unknown4 = binaryReader:Read(Size.BYTE, Types.UINT8),
        rawFlags = binaryReader:Read(Size.INTEGER, Types.UINT32),
    }
    result.flags = FlagsToObj(result.rawFlags)
    return result
end

---@param binaryReader BinaryStringReader
local function ParseDODT(binaryReader)
    return {
        posX = binaryReader:Read(Size.INTEGER, Types.FLOAT),
        posY = binaryReader:Read(Size.INTEGER, Types.FLOAT),
        posZ = binaryReader:Read(Size.INTEGER, Types.FLOAT),
        rotX = binaryReader:Read(Size.INTEGER, Types.FLOAT),
        rotY = binaryReader:Read(Size.INTEGER, Types.FLOAT),
        rotZ = binaryReader:Read(Size.INTEGER, Types.FLOAT),
    }
end

---@param binaryReader BinaryStringReader
local function ParseDNAM(binaryReader)
    return binaryReader:Read(binaryReader.length)
end

---@param binaryReader BinaryStringReader
local function ParseCompositeDestination(binaryReader, context)
    local followFields = {
        ['DODT'] = ParseDODT,
        ['DNAM'] = ParseDNAM,
    }
    local followComposities = {
    }
    local followArrays = {
    }
    return BaseFieldsParser(binaryReader, followFields, followComposities, followArrays, context)
end

---@param binaryReader BinaryStringReader
local function ParseAI_A(binaryReader)
    return {
        name = binaryReader:Read(32),
        unknown = binaryReader:Read(Size.BYTE, Types.UINT8),
    }
end

---@param binaryReader BinaryStringReader
local function ParseCNDT_E(binaryReader, context)
    context['CNDT_E'] = binaryReader:Read(binaryReader.length)
    local ai_ef = context['AI_E'] or nil
    if ai_ef then
        ai_ef.cndt = context['CNDT_E']
    end
    return context['CNDT_E']
end

---@param binaryReader BinaryStringReader
local function ParseCNDT_F(binaryReader, context)
    context['CNDT_F'] = binaryReader:Read(binaryReader.length)
    local ai_ef = context['AI_F'] or nil
    if ai_ef then
        ai_ef.cndt = context['CNDT_F']
    end
    return context['CNDT_F']
end

---@param binaryReader BinaryStringReader
local function ParseAI_E(binaryReader, context)
    local cndt = context['CNDT_E'] or nil
    context['AI_E'] = {
        x = binaryReader:Read(Size.INTEGER, Types.FLOAT),
        y = binaryReader:Read(Size.INTEGER, Types.FLOAT),
        z = binaryReader:Read(Size.INTEGER, Types.FLOAT),
        duration = binaryReader:Read(Size.HALFWORD, Types.UINT16),
        id = binaryReader:Read(32),
        unknown = binaryReader:Read(Size.BYTE, Types.UINT8),
        unused = binaryReader:Read(Size.BYTE, Types.UINT8),
        cndt = cndt
    }
    return context['AI_E']
end

---@param binaryReader BinaryStringReader
local function ParseAI_F(binaryReader, context)
    local cndt = context['CNDT_F'] or nil
    context['AI_F'] = {
        x = binaryReader:Read(Size.INTEGER, Types.FLOAT),
        y = binaryReader:Read(Size.INTEGER, Types.FLOAT),
        z = binaryReader:Read(Size.INTEGER, Types.FLOAT),
        duration = binaryReader:Read(Size.HALFWORD, Types.UINT16),
        id = binaryReader:Read(32),
        unknown = binaryReader:Read(Size.BYTE, Types.UINT8),
        unused = binaryReader:Read(Size.BYTE, Types.UINT8),
        cndt = cndt
    }
    return context['AI_F']
end

---@param binaryReader BinaryStringReader
local function ParseAI_EComposite(binaryReader, context)
    local followFields = {
        ['AI_E'] = ParseAI_E,
        ['CNDT'] = ParseCNDT_E,
    }
    local followComposities = {
    }
    local followArrays = {
    }
    return BaseFieldsParser(binaryReader, followFields, followComposities, followArrays, context)
end

---@param binaryReader BinaryStringReader
local function ParseAI_FComposite(binaryReader, context)
    local followFields = {
        ['AI_F'] = ParseAI_F,
        ['CNDT'] = ParseCNDT_F,
    }
    local followComposities = {
    }
    local followArrays = {
    }
    return BaseFieldsParser(binaryReader, followFields, followComposities, followArrays, context)
end

---@param binaryReader BinaryStringReader
local function ParseAI_T(binaryReader)
    return {
        x = binaryReader:Read(Size.INTEGER, Types.FLOAT),
        y = binaryReader:Read(Size.INTEGER, Types.FLOAT),
        z = binaryReader:Read(Size.INTEGER, Types.FLOAT),
        unknown = binaryReader:Read(Size.BYTE, Types.UINT8),
        unused = {
            binaryReader:Read(Size.BYTE, Types.UINT8),
            binaryReader:Read(Size.BYTE, Types.UINT8),
            binaryReader:Read(Size.BYTE, Types.UINT8),
        }
    }
end

---@param binaryReader BinaryStringReader
local function ParseAI_W(binaryReader)
    return {
        distance = binaryReader:Read(Size.HALFWORD, Types.UINT16),
        duration = binaryReader:Read(Size.HALFWORD, Types.UINT16),
        timeOfDay = binaryReader:Read(Size.BYTE, Types.UINT8),
        idles = {
            binaryReader:Read(Size.BYTE, Types.UINT8),
            binaryReader:Read(Size.BYTE, Types.UINT8),
            binaryReader:Read(Size.BYTE, Types.UINT8),
            binaryReader:Read(Size.BYTE, Types.UINT8),
            binaryReader:Read(Size.BYTE, Types.UINT8),
            binaryReader:Read(Size.BYTE, Types.UINT8),
            binaryReader:Read(Size.BYTE, Types.UINT8),
            binaryReader:Read(Size.BYTE, Types.UINT8),
        },
        unknown = binaryReader:Read(Size.BYTE, Types.UINT8),
    }
end

local funcMap = {
    ['NAME'] = ParseNAME,
    ['MODL'] = ParseMODL,
    ['FNAM'] = ParseFNAM,
    ['RNAM'] = ParseRNAM,
    ['CNAM'] = ParseCNAM,
    ['ANAM'] = ParseANAM,
    ['BNAM'] = ParseBNAM,
    ['KNAM'] = ParseKNAM,
    ['SCRI'] = ParseSCRI,
    ['NPDT'] = ParseNPDT,
    ['FLAG'] = ParseFLAG,
    ['XSCL'] = ParseXSCL,
    ['NPCO'] = ParseNPCO,
    ['NPCS'] = ParseNPCS,
    ['AIDT'] = ParseAIDT,

    --- Saint Note: Initially thought these were a composite, but it doesn't seem to be the case
    ['AI_A'] = ParseAI_A,
    ['AI_T'] = ParseAI_T,
    ['AI_W'] = ParseAI_W,
    --- Saint Note: These actually are composite types
    -- ['AI_E'] = ParseAI_EF,
    -- ['AI_F'] = ParseAI_EF,
}

local compositeGroup = {
    ['DODT'] = ParseCompositeDestination,
    ['AI_E'] = ParseAI_EComposite,
    ['AI_F'] = ParseAI_FComposite,
}

local arrayType = {
    ['NPCO'] = 'NPCO',
    ['NPCS'] = 'NPCS',
    ['DODT'] = 'Destinations',
    ['AI_A'] = 'AI',
    ['AI_E'] = 'AI',
    ['AI_F'] = 'AI',
    ['AI_T'] = 'AI',
    ['AI_W'] = 'AI',
}

---@param binaryReader BinaryStringReader
return function(binaryReader)
    assert(binaryReader:Peak(Size.INTEGER) == 'NPC_')
    return BaseRecordParser(binaryReader, funcMap, compositeGroup, arrayType)
end
